collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
  - node
  - cpp
  - java
  - csharp
ref: collection-example
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: shell
operation:
    language: javascript
    code: |
      db.restaurants.update(
          { "name" : "Juni" },
          {
            $set: { "cuisine": "American (New)" },
            $currentDate: { "lastModified": true }
          }
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: shell
operation:
  language: javascript
  code: |
      db.restaurants.update(
        { "restaurant_id" : "41156888" },
        { $set: { "address.street": "East 31st Street" } }
      )
post: |
   The update operation returns a :method:`WriteResult` object which
   contains the status of the operation.
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: shell
operation:
    language: javascript
    code: |
      db.restaurants.update(
        { "address.zipcode": "10016", cuisine: "Other" },
        {
          $set: { cuisine: "Category To Be Determined" },
          $currentDate: { "lastModified": true }
        },
        { multi: true}
      )
post: |
  The update operation returns a :method:`WriteResult` object which
  contains the status of the operation.
replacement:
  updateMethod: :method:`~db.collection.update()`
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: python
operation:
  - language: python
    code: |
      result = db.restaurants.update_one(
          {"name": "Juni"},
          {
              "$set": {
                  "cuisine": "American (New)"
              },
              "$currentDate": {"lastModified": True}
          }
      )
    post: |
      The operation returns a :py:class:`~pymongo.results.UpdateResult` object that
      reports the count of documents matched and modified.
  - pre: |
      To see the number of documents that matched the filter condition,
      access the :py:attr:`~pymongo.results.UpdateResult.matched_count`
      attribute of the returned
      :py:class:`~pymongo.results.UpdateResult` object.
    language: python
    code: |
       result.matched_count
  - pre: |
      The :py:attr:`~pymongo.results.UpdateResult.matched_count` is :
    language: python
    code: |
       1
  - pre: |
      To see the number of documents modified by the update operation,
      access the
      :py:attr:`~pymongo.results.UpdateResult.modified_count` attribute
      of the returned :py:class:`~pymongo.results.UpdateResult` object.
    language: python
    code: |
       result.modified_count
  - pre: |
       The :py:attr:`~pymongo.results.UpdateResult.modified_count` is:
    language: python
    code: |
       1
replacement:
  updateMethod: :py:meth:`~pymongo.collection.Collection.update_one`
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: python
operation:
  - language: python
    code: |
      result = db.restaurants.update_one(
          {"restaurant_id": "41156888"},
          {"$set": {"address.street": "East 31st Street"}}
      )
    post: |
      The operation returns a :py:class:`~pymongo.results.UpdateResult` object that
      reports the count of documents matched and modified.
  - pre: |
      To see the number of documents that matched the filter condition,
      access the :py:attr:`~pymongo.results.UpdateResult.matched_count`
      attribute of the returned
      :py:class:`~pymongo.results.UpdateResult` object.
    language: python
    code: |
      result.matched_count
  - pre: |
      The :py:attr:`~pymongo.results.UpdateResult.matched_count` is:
    language: python
    code: |
      1
  - pre: |
      To see the number of documents modified by the update operation,
      access the
      :py:attr:`~pymongo.results.UpdateResult.modified_count` attribute
      of the returned :py:class:`~pymongo.results.UpdateResult` object.
    language: python
    code: |
      result.modified_count
  - pre: |
      The :py:attr:`~pymongo.results.UpdateResult.modified_count` is:
    language: python
    code: |
      1
replacement:
  updateMethod: :py:meth:`~pymongo.collection.Collection.update_one`
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
pre: |
  The {{update}} method updates a single document. To update multiple
  documents, use the {{updateMany}} method.

  The following operation updates *all* documents that have
  ``address.zipcode`` field equal to ``"10016"``, setting the ``borough``
  field to ``"Midtown"`` and the ``lastModified`` field to the current
  date.
edition: python
operation:
  - language: python
    code: |
      result = db.restaurants.update_many(
          {"address.zipcode": "10016", "cuisine": "Other"},
          {
              "$set": {"cuisine": "Category To Be Determined"},
              "$currentDate": {"lastModified": True}
          }
      )
    post: |
      The operation returns a :py:class:`~pymongo.results.UpdateResult` object that
      reports the count of documents matched and modified.
  - pre: |
      To see the number of documents that matched the filter condition,
      access the :py:attr:`~pymongo.results.UpdateResult.matched_count`
      attribute of the returned
      :py:class:`~pymongo.results.UpdateResult` object.
    language: python
    code: |
      result.matched_count
  - pre: |
      The :py:attr:`~pymongo.results.UpdateResult.matched_count` is:
    language: python
    code: |
      20
  - pre: |
      To see the number of documents modified by the update operation,
      access the
      :py:attr:`~pymongo.results.UpdateResult.modified_count` attribute
      of the returned :py:class:`~pymongo.results.UpdateResult` object.
    language: python
    code: |
      result.modified_count
  - pre: |
      The :py:attr:`~pymongo.results.UpdateResult.modified_count` is:
    language: python
    code: |
      20
replacement:
  update: :py:meth:`~pymongo.collection.Collection.update_one`
  updateMany: :py:meth:`~pymongo.collection.Collection.update_many`
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: node
operation:
  - pre: |
      Define an ``updateRestaurants`` function as follows:
    language: javascript
    code: |
      var updateRestaurants = function(db, callback) {
         db.collection('restaurants').updateOne(
            { "name" : "Juni" },
            {
              $set: { "cuisine": "American (New)" },
              $currentDate: { "lastModified": true }
            }, function(err, results) {
            console.log(results);
            callback();
         });
      };
  - pre: |
      Call the ``updateRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        updateRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The {{updateMethod}} returns the number of documents updated. 
replacement:
  updateMethod: "updateOne_"
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: node
operation:
  - pre: |
      Define an ``updateRestaurants`` function as follows:
    language: javascript
    code: |
      var updateRestaurants = function(db, callback) {
         db.collection('restaurants').updateOne(
            { "restaurant_id" : "41156888" },
            { $set: { "address.street": "East 31st Street" } },
            function(err, results) {
              console.log(results);
              callback();
         });
      };
  - pre: |
      Call the ``updateRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        updateRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The {{updateMethod}} returns the number of documents updated. 
replacement:
  updateMethod: "updateOne_"
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: node
pre: |
  To update multiple documents, use the {{updateMethod}} method.

  The following operation updates *all* documents that have
  ``address.zipcode`` field equal to ``"10016"`` and ``cuisine`` field
  equal to ``"Other"``, setting the ``cuisine`` field to ``"Category To
  Be Determined"`` and the ``lastModified`` field to the current date.
operation:
  - pre: |
      Define an ``updateRestaurants`` function as follows:
    language: javascript
    code: |
      var updateRestaurants = function(db, callback) {
         db.collection('restaurants').updateMany(
            { "address.zipcode": "10016", cuisine: "Other" },
            {
              $set: { cuisine: "Category To Be Determined" },
              $currentDate: { "lastModified": true }
            }
            ,
            function(err, results) {
              console.log(results);
              callback();
         });
      };
  - pre: |
      Call the ``updateRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        updateRestaurants(db, function() {
            db.close();
        });
      });
post: |
   The {{updateMethod}} returns the number of documents updated. 
replacement:
  updateMethod: "updateMany_"
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: cpp
operation:
  literalinclude: includes/example-cpp-update-top-level-fields.cpp
  language: cpp
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: cpp
operation:
  literalinclude: includes/example-cpp-update-embedded-field.cpp
  language: cpp
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: cpp
operation:
  literalinclude: includes/example-cpp-update-multiple-documents.cpp
  language: cpp
pre: |
  To update multiple documents, use the {{updateMethod}} method.

  The following operation updates *all* documents that have
  ``address.zipcode`` field equal to ``"10016"``, setting the ``borough``
  field to ``"Manhattan"`` and the ``lastModified`` field to the current
  date.
replacement:
  updateMethod: "update_many_"
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: java
operation:
  - literalinclude: includes/example-java-update-top-level-fields.java
    language: java
  - pre: |
      .. include:: includes/example-java-update-top-level-fields-post.rst
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: java
operation:
  - literalinclude: includes/example-java-update-embedded-field.java
    language: java
  - pre: |
      .. include:: includes/example-java-update-embedded-field-post.rst
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: java
pre: |
  To update multiple documents, use the {{updateMethod}} method.

  The following operation updates *all* documents that have
  ``address.zipcode`` field equal to ``"10016"``, setting the ``borough``
  field to ``"Manhattan"`` and the ``lastModified`` field to the current
  date.
operation:
  - literalinclude: includes/example-java-update-multiple-documents.java
    language: java
  - post: |
      .. include:: includes/example-java-update-multiple-documents-post.rst
replacement:
  updateMethod: "updateMany_"
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-top-level-fields
ref: update-top-level-fields
edition: csharp
pre: |
  The following operation updates the first document with ``name``
  equal to ``"Juni"``, to update the ``cuisine`` field and the
  ``lastModified`` field.

  To specify a :update:`$set` operation to update the ``cuisine``
  field, use the Set_ method of the UpdateDefinitionBuilder_.

  To specify a :update:`$currentDate` operation to update the
  ``lastModified`` field with the current date, use the CurrentDate_
  method of the UpdateDefinitionBuilder_.
operation:
  - literalinclude: includes/example-csharp-update-top-level-fields.cs
    language: csharp
  - pre: |
      .. include:: /includes/fact-csharp-test-w-fluent-assertions.rst
  - literalinclude: includes/example-csharp-update-top-level-fields-results.rst
    language: csharp
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-embedded-field
ref: update-embedded-field
edition: csharp
operation:
  - literalinclude: includes/example-csharp-update-embedded-field.cs
    language: csharp
  - pre: |
      .. include:: /includes/fact-csharp-test-w-fluent-assertions.rst
  - literalinclude: includes/example-csharp-update-embedded-field-results.rst
    language: csharp
---
source:
  file: examples-update-fields-base.yaml
  ref: _update-multiple-documents
ref: update-multiple-documents
edition: csharp
operation:
  - literalinclude: includes/example-csharp-update-multiple-documents.cs
    language: csharp
  - pre: |
      .. include:: /includes/fact-csharp-test-w-fluent-assertions.rst
  - literalinclude: includes/example-csharp-update-multiple-documents-results.rst
    language: csharp
  - post: |
      .. include:: /includes/fact-count-discrepancies.rst
pre: |
  To update multiple documents, use the {{updateMethod}} method.

  The following operation updates *all* documents that have
  ``address.zipcode`` field equal to ``"10016"``, setting the ``borough``
  field to ``"Manhattan"`` and the ``lastModified`` field to the current
  date.
replacement:
  updateMethod: "UpdateManyAsync_"
...
