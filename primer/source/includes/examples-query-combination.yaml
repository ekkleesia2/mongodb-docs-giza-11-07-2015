collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
  - node
  - cpp
  - java
  - csharp
ref: collection-example
---
edition: shell
ref: logical-and
source:
  file: examples-query-combination-base.yaml
  ref: _logical-and
operation:
  language: javascript
  code: |
    db.restaurants.find( { "cuisine": "Italian", "address.zipcode": "10075" } )
---
edition: shell
ref: logical-or
source:
  file: examples-query-combination-base.yaml
  ref: _logical-or
operation:
  language: javascript
  code: |
    db.restaurants.find(
       { $or: [ { "cuisine": "Italian" }, { "address.zipcode": "10075" } ] }
    )
---
edition: python
ref: logical-and
source:
  file: examples-query-combination-base.yaml
  ref: _logical-and
operation:
  - language: python
    code: |
      cursor = db.restaurants.find({"cuisine": "Italian", "address.zipcode": "10075"})
  - pre: |
      Iterate the cursor and print the matching documents.
    language: python
    code: |
      for document in cursor:
          print(document)
---
edition: python
ref: logical-or
source:
  file: examples-query-combination-base.yaml
  ref: _logical-or
operation:
  - language: python
    code: |
      cursor = db.restaurants.find(
          {"$or": [{"cuisine": "Italian"}, {"address.zipcode": "10075"}]})
  - pre: |
      Iterate the cursor and print the matching documents.
    language: python
    code: |
      for document in cursor:
          print(document)
---
edition: node
ref: logical-and
source:
  file: examples-query-combination-base.yaml
  ref: _logical-and
operation:
  - pre: |
      Define the ``findRestaurants`` function as follows:
    language: javascript
    code: |
      var findRestaurants = function(db, callback) {
         var cursor =db.collection('restaurants').find(
           { "cuisine": "Italian", "address.zipcode": "10075" }
         );
         cursor.each(function(err, doc) {
            assert.equal(err, null);
            if (doc != null) {
               console.dir(doc);
            } else {
               callback();
            }
         });
      };
  - pre: |
      Call the ``findRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        findRestaurants(db, function() {
            db.close();
        });
      });
replacement:
  findMethod: |
    `find() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#find>`_
---
edition: node
ref: logical-or
source:
  file: examples-query-combination-base.yaml
  ref: _logical-or
operation:
  - pre: |
      Define the ``findRestaurants`` function as follows:
    language: javascript
    code: |
      var findRestaurants = function(db, callback) {
         var cursor =db.collection('restaurants').find( 
             { $or: [ { "cuisine": "Italian" }, { "address.zipcode": "10075" } ] }
         );
         cursor.each(function(err, doc) {
            assert.equal(err, null);
            if (doc != null) {
               console.dir(doc);
            } else {
               callback();
            }
         });
      };
  - pre: |
      Call the ``findRestaurants`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);

        findRestaurants(db, function() {
            db.close();
        });
      });
replacement:
  findMethod: |
    `find() <http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#find>`_
---
edition: cpp
ref: logical-and
source:
  file: examples-query-combination-base.yaml
  ref: _logical-and
pre: |
  You can specify a logical conjunction (``AND``) for a list of query
  conditions by inserting (i.e. ``<<``) multiple query conditions to
  the query document.
operation:
  literalinclude: includes/example-cpp-query-logical-and.cpp
  language: cpp
---
edition: cpp
ref: logical-or
source:
  file: examples-query-combination-base.yaml
  ref: _logical-or
operation:
  literalinclude: includes/example-cpp-query-logical-or.cpp
  language: cpp
---
edition: java
ref: logical-and
source:
  file: examples-query-combination-base.yaml
  ref: _logical-and
pre: |
  You can specify a logical conjunction (``AND``) for multiple query
  conditions by appending conditions to the query document. See the
  append_ method in the org.bson.Document_ class.
operation:
  - literalinclude: includes/example-java-logical-and.java
    language: java
  - post: |
       The result set includes only the documents that matched all specified
       criteria.
  - pre: |
      .. include:: includes/example-java-logical-and-pre1.rst
  - literalinclude: includes/example-java-logical-and-pre1.java
    language: java
  - pre: |
      .. include:: includes/fact-java-filters-helpers.rst
  - literalinclude: includes/example-java-logical-and-pre2.java
    language: java
post: ''
---
edition: java
ref: logical-or
source:
  file: examples-query-combination-base.yaml
  ref: _logical-or
operation:
  - literalinclude: includes/example-java-logical-or.java
    language: java
  - post: |
       The result set includes only the documents that match either
       conditions.
  - pre: |
      .. include:: includes/example-java-logical-or-pre1.rst
  - literalinclude: includes/example-java-logical-or-pre1.java
    language: java
  - pre: |
      .. include:: includes/fact-java-filters-helpers.rst
  - literalinclude: includes/example-java-logical-or-pre2.java
    language: java
post: ''
---
edition: csharp
ref: logical-and
source:
  file: examples-query-combination-base.yaml
  ref: _logical-and
pre: |
  You can specify a logical conjunction (``AND``) for a list of query
  conditions by joining the conditions with an ampersand (e.g. ``&``).
operation:
  - literalinclude: includes/example-csharp-logical-and.cs
    language: csharp
  - pre: |
      .. include:: /includes/fact-csharp-test-w-fluent-assertions.rst
  - literalinclude: includes/example-csharp-logical-and-results.rst
  - post: |
      .. include:: /includes/fact-count-discrepancies.rst
---
edition: csharp
ref: logical-or
source:
  file: examples-query-combination-base.yaml
  ref: _logical-or
pre: |
  You can specify a logical disjunction (``OR``) for a list of query
  conditions by joining the conditions with a pipe (e.g. ``|``).
operation:
  - literalinclude: includes/example-csharp-logical-or.cs
    language: csharp
  - pre: |
      .. include:: /includes/fact-csharp-test-w-fluent-assertions.rst
  - literalinclude: includes/example-csharp-logical-or-results.rst
  - post: |
      .. include:: /includes/fact-count-discrepancies.rst
...
