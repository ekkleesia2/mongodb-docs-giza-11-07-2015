collection: "restaurants"
options:
  base_file: true
---
title:
  text: Group Documents by a Field and Calculate Count
  level: 2
ref: _group-documents-by-a-field-and-calculate-count
pre: |
  Use the {{stageGroup}} stage to group by a specified key. In the
  {{stageGroup}}  stage, specify the group by key in the ``_id``
  field. {{stageGroup}} accesses fields by the field path, which is
  the field name prefixed by a dollar sign ``$``. The
  {{stageGroup}} stage can use :manual:`accumulators
  </meta/aggregation-quick-reference/#group-operators>` to perform
  calculations for each group.

  The following example groups the documents in the ``restaurants``
  collection by the ``borough`` field and uses the :group:`$sum`
  accumulator to count the documents for each group.
post: |
  The result set consists of the following documents:
final: |
  The ``_id`` field contains the distinct ``borough`` value, i.e., the
  group by key value.
replacement:
  stageGroup: ":pipeline:`$group`"
---
title:
  text: Filter and Group Documents
  level: 2
ref: _filter-and-group-documents
pre: |
  Use the {{stageMatch}} stage to filter documents.
  {{stageMatch}} uses the MongoDB :doc:`query syntax
  </query>`.

  The following pipeline uses {{stageMatch}} to query the
  ``restaurants`` collection for documents with ``borough`` equal to
  ``"Queens"`` and ``cuisine`` equal to ``Brazilian``.

  Then the {{stageGroup}} stage groups the matching documents
  by the ``address.zipcode`` field and uses the :group:`$sum`
  accumulator to calculate the count. {{stageGroup}} accesses
  fields by the field path, which is the field name prefixed by a
  dollar sign ``$``.
post: |
  The result set consists of the following documents:
final: |
  The ``_id`` field contains the distinct ``zipcode`` value, i.e., the
  group by key value.
replacement:
  stageGroup: ":pipeline:`$group`"
  stageMatch: ":pipeline:`$match`"
...