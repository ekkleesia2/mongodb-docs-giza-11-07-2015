.. _replication-introduction:

========================
Replication Introduction
========================

.. default-domain:: mongodb

.. start-primer-here

Replication is the process of synchronizing data across multiple
servers.

Purpose of Replication
----------------------

Replication provides redundancy and increases data availability. With
multiple copies of data on different database servers, replication
protects a database from the loss of a single server. Replication also
allows you to recover from hardware failure and service
interruptions. With additional copies of the data, you can dedicate
one to disaster recovery, reporting, or backup.

In some cases, you can use replication to increase read
capacity. Clients have the ability to send read and write operations
to different servers. You can also maintain copies in different data
centers to increase the locality and availability of data for distributed
applications.

Replication in MongoDB
----------------------

A replica set is a group of :program:`mongod` instances that host the
same data set. One :program:`mongod`, the primary, receives all write
operations. All other instances, secondaries, apply operations from
the primary so that they have the same data set.

The :doc:`primary </core/replica-set-primary>` accepts all write
operations from clients. A replica set can have only one primary.
[#edge-cases-2-primaries]_ To support replication, the primary records all
changes to its data sets in its :doc:`oplog </core/replica-set-oplog>`.
For more information on primary node operation, see
:doc:`/core/replica-set-primary`.

.. include:: /images/replica-set-read-write-operations-primary.rst

The :doc:`secondaries </core/replica-set-secondary>` replicate the
primary's oplog and apply the operations to their data sets such that
the secondaries' data sets reflect the primary's data set. If the
primary is unavailable, the replica set will elect a secondary to be
primary. For more information on secondary members, see
:doc:`/core/replica-set-secondary`.

.. include:: /images/replica-set-primary-with-two-secondaries.rst

You may add an extra :program:`mongod` instance to a replica set as an
:doc:`arbiter </core/replica-set-arbiter>`. Arbiters do not maintain a
data set. The purpose of an arbiter is to maintain a quorum in a
replica set by responding to heartbeat and election requests by other
replica set members. Because they do not store a data set, arbiters can
be a good way to provide replica set quorum functionality with a
cheaper resource cost than a fully functional replica set member with a
data set. If your replica set has an even number of members, add an
arbiter to obtain a majority of votes in an election for primary.
Arbiters do not require dedicated hardware. For more information on
arbiters, see :doc:`/core/replica-set-arbiter`.

.. include:: /images/replica-set-primary-with-secondary-and-arbiter.rst

An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter
whereas a :doc:`primary </core/replica-set-primary>` may step down and
become a :doc:`secondary </core/replica-set-secondary>` and a
:doc:`secondary </core/replica-set-secondary>` may become the primary
during an election.

.. _asynchronous-replication:

Asynchronous Replication
~~~~~~~~~~~~~~~~~~~~~~~~

Secondaries apply operations from the primary asynchronously. By
applying operations after the primary, sets can continue to function
despite the failure of one or more members. For more information on
replication mechanics, see :ref:`replica-set-oplog` and
:ref:`replica-set-sync`.

Automatic Failover
~~~~~~~~~~~~~~~~~~

When a primary does not communicate with the other members of the set
for more than 10 seconds, the replica set will attempt to
select another member to become the new primary. The first secondary
that receives a majority of the votes becomes primary.

.. include:: /images/replica-set-trigger-election.rst

See :ref:`replica-set-elections` and
:ref:`replica-set-rollbacks` for more information.

Read Operations
~~~~~~~~~~~~~~~

When a replica set has one and only one primary, reads from that
primary provide :term:`strict consistency`. [#edge-cases-2-primaries]_

By default, clients read from the primary; however, clients can specify
a :doc:`read preference </core/read-preference>` to send read
operations to secondaries. :ref:`Asynchronous replication
<asynchronous-replication>` to secondaries means that reads from
secondaries may return data that does not reflect the state of the data
on the primary. For information on reading from replica sets, see
:doc:`/core/read-preference`.

In MongoDB, clients can see the results of writes before they are made
durable:

.. include:: /includes/list-visibility-of-data.rst

.. end-primer-here

Additional Features
~~~~~~~~~~~~~~~~~~~

Replica sets provide a number of options to support application
needs. For example, you may deploy a replica set with :doc:`members in
multiple data centers
</core/replica-set-architecture-geographically-distributed>`, or
control the outcome of elections by adjusting the
:data:`~replSetGetConfig.members[n].priority` of some
members. Replica sets also support dedicated members for reporting,
disaster recovery, or backup functions.

See :ref:`replica-set-secondary-only-members`,
:ref:`replica-set-hidden-members` and
:ref:`replica-set-delayed-members` for more information.

.. [#edge-cases-2-primaries]

   .. include:: /includes/footnote-two-primaries-edge-cases.rst
