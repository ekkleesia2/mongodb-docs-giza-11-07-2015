.. index:: sharding; config servers
.. index:: config servers
.. _sharding-config-server:
.. _sharded-cluster-config-server:

==============
Config Servers
==============

.. default-domain:: mongodb

Config servers are special :program:`mongod` instances that store the
:doc:`metadata </core/sharded-cluster-metadata>` for a sharded cluster.

A production sharded cluster has *exactly three* config servers. All
config servers must be available to deploy a sharded cluster or to make
any changes to cluster metadata. Config servers *do not* run as replica
sets.

For testing purposes you may deploy a cluster with a single config
server. But to ensure redundancy and safety in production, you should
always use three.

.. warning::

   If your cluster has a single config server, then the config server
   is a single point of failure. If the config server is inaccessible,
   the cluster is not accessible. If you cannot recover the data on a
   config server, the cluster will be inoperable.

   **Always** use three config servers for production deployments.

Each sharded cluster must have its own config servers. Do not use the
same config servers for different sharded clusters.

.. tip::

   .. include:: /includes/fact-use-cnames-for-config-servers.rst

.. index:: config databases
.. index:: database, config

.. _config-server-read-write-ops:

Read and Write Operations on Config Servers
-------------------------------------------

Config servers store the cluster's metadata in the :doc:`config
database </reference/config-database>`. The :program:`mongos` instances
cache this data and use it to route reads and writes to shards.

MongoDB only writes data to the config server when the metadata
changes, such as

- after a :doc:`chunk migration </core/sharding-chunk-migration>`, or

- after a :doc:`chunk split </core/sharding-chunk-splitting>`.

When writing to the three config servers, a coordinator dispatches the
same write commands to the three config servers and collects the
results. Differing results indicate an inconsistent writes to the
config servers and may require manual intervention. Once the config
servers become inconsistent, the balancer will not perform any chunk
migration and :program:`mongos` will not perform auto-splits of chunks.

MongoDB reads data from the config server in the following cases:

- A new :program:`mongos` starts for the first time, or an existing
  :program:`mongos` restarts.

- After change in the cluster metadata, such as after a chunk
  migration.

MongoDB also uses the config server to manage distributed locks.

Config Server Availability
--------------------------

If one or two config servers become unavailable, the cluster's metadata
becomes *read only*. You can still read and write data from the shards,
but no chunk migrations or splits will occur until all three servers
are available.

If all three config servers are unavailable, you can still use the
cluster if you do not restart the :program:`mongos` instances until
after the config servers are accessible again. If you restart the
:program:`mongos` instances before the config servers are available,
the :program:`mongos` will be unable to route reads and writes.

Clusters become inoperable without the cluster metadata. To ensure that
the config servers remain available and intact, backups of config
servers are critical. The data on the config server is small compared
to the data stored in a cluster, and the config server has a relatively
low activity load. These properties facilitate finding a window to back
up the config servers.

.. include:: /includes/fact-rename-config-servers-requires-cluster-restart.rst

See :ref:`sharding-config-servers-and-availability` for more
information.
