==========================
Atomicity and Transactions
==========================

.. default-domain:: mongodb

In MongoDB, a write operation is atomic on the level of a single
document, even if the operation modifies multiple embedded documents
*within* a single document.

When a single write operation modifies multiple documents, the
modification of each document is atomic, but the operation as a whole
is not atomic and other operations may interleave. However, you can
*isolate* a single write operation that affects multiple documents
using the :update:`$isolated` operator.

``$isolated`` Operator
----------------------

Using the :update:`$isolated` operator, a write operation that affect
multiple documents can prevent other processes from interleaving once
the write operation modifies the first document. This ensures that no
client sees the changes until the write operation completes or errors
out.

Isolated write operation does not provide "all-or-nothing" atomicity.
That is, an error during the write operation does not roll back all its
changes that preceded the error.

The :update:`$isolated` operator does **not** work on sharded clusters.

For an example of an update operation that uses the :update:`$isolated`
operator, see :update:`$isolated`. For an example of a remove operation
that uses the :update:`$isolated` operator, see
:ref:`isolate-remove-operations`.

Transaction-Like Semantics
--------------------------

Since a single document can contain multiple embedded documents,
single-document atomicity is sufficient for many practical use cases.
For cases where a sequence of write operations must operate as if in a
single transaction, you can implement a :doc:`two-phase commit
</tutorial/perform-two-phase-commits>` in your application.

However, two-phase commits can only offer transaction-*like* semantics.
Using two-phase commit ensures data consistency, but it is possible for
applications to return intermediate data during the two-phase commit or
rollback.

For more information on two-phase commit and rollback, see
:doc:`/tutorial/perform-two-phase-commits`.

.. _concurrency-control:

Concurrency Control
-------------------

Concurrency control allows multiple applications to run concurrently
without causing data inconsistency or conflicts.

An approach may be to create a :ref:`unique index <index-type-unique>`
on a field (or fields) that should have only unique values (or unique
combination of values) prevents duplicate insertions or updates that
result in duplicate values. For examples of use cases, see
:ref:`update() and Unique Index <update-with-unique-indexes>` and
:ref:`findAndModify() and Unique Index <upsert-and-unique-index>`.

Another approach is to specify the expected current value of a field in
the query predicate for the write operations. For an example, see
:doc:`Update if Current </tutorial/update-if-current>`.

The two-phase commit pattern provides a variation where the query
predicate includes the :ref:`application identifier
<2-phase-commits-concurrency>` as well as the expected state of the
data in the write operation.
